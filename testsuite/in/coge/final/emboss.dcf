// Embosses a black and white pgm image
class Program {
  int imageIn[130000];
  int imageOut[130000];
  int cols, rows, size;

  void read() {
    int i,j;
    
    callout("pgm_open_for_read", "saman.pgm");
    cols = callout("pgm_get_cols");
    rows = callout("pgm_get_rows");

    size = cols * rows;
    for i = 0, rows {
      for j = 0, cols {
        imageIn[i*303+j] = callout("pgm_get_next_pixel");
      }
    }

    callout("pgm_close");
  }

  void write() {
    int i,j;

    callout("pgm_open_for_write", "saman_emboss.pgm", cols, rows);

    size = cols * rows;
    for i = 0, rows {
      for j = 0, cols {
        callout("pgm_write_next_pixel", imageOut[i*303+j]);
      }
    }

    callout("pgm_close");
  }

  void emboss() {
    int i,j;

    for i = 1, rows-1 {
      for j = 1, cols-1 {
	int p1, p2, p3, p4, p5, p6, t;

	p1 = imageIn[(i-1)*303 + j-1];
	p2 = imageIn[(i-1)*303 + j];
	p3 = imageIn[i*303 + j-1];
	p4 = imageIn[i*303 + j+1];
	p5 = imageIn[(i+1)*303 + j];
	p6 = imageIn[(i+1)*303 + j+1];

	t = 128 + p4 + p5 + p6 - p1 - p2 - p3;

	// clip
	if (t < 0) { t = 0; }
	if (t > 255) { t = 255; }

	imageOut[i*303 + j] = t;

      }
    }
  }

  void main() {
    read();
    callout("start_caliper");
    emboss();
    callout("end_caliper");
    write();
  }
  
}
