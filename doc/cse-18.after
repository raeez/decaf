optimizations on
debug on
formattedTree: DecafProgram {fields = [DecafArrField (DecafArr {arrayType = DecafInteger, arrayID = "a", arrayLength = DecafDec "10", arrayPos = (2,7)}) (2,7)], methods = [DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (4,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (5,13)) (5,13))) (5,5)], blockPos = (4,22)}, methodPos = (4,3)},DecafMethod {methodType = DecafVoid, methodID = "foo", methodArg = [], methodBody = DecafBlock {blockVars = [DecafVar {varType = DecafInteger, varID = "i", varPos = (9,5)}], blockStms = [DecafAssignStm (DecafVarLoc "i" (10,7)) (DecafEq (10,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (10,18)) (10,18)], methodCallPos = (10,9)}) (10,19)) (10,5),DecafAssignStm (DecafArrLoc {arrLocIdent = "a", arrLocExpr = DecafLocExpr (DecafVarLoc "i" (13,8)) (13,8), arrLocPos = (13,5)}) (DecafEq (13,12)) (DecafLitExpr (DecafIntLit (DecafDec "7") (13,13)) (13,13)) (13,5),DecafAssignStm (DecafArrLoc {arrLocIdent = "a", arrLocExpr = DecafLocExpr (DecafVarLoc "i" (14,8)) (14,8), arrLocPos = (14,5)}) (DecafEq (14,12)) (DecafLitExpr (DecafIntLit (DecafDec "3") (14,13)) (14,13)) (14,5)], blockPos = (8,14)}, methodPos = (8,3)},DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [], blockStms = [DecafMethodStm (DecafPureMethodCall {methodCallID = "foo", methodCallArgs = [], methodCallPos = (18,5)}) (18,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (19,29),DecafCalloutArgExpr (DecafLocExpr (DecafArrLoc {arrLocIdent = "a", arrLocExpr = DecafLitExpr (DecafIntLit (DecafDec "2") (19,34)) (19,34), arrLocPos = (19,31)}) (19,35)) (19,35)], methodCalloutPos = (19,5)}) (19,5)], blockPos = (17,15)}, methodPos = (17,3)}]}

(SymbolTable {symbolRecords = [StringRec "%d\n" 0,StringRec "main" 0,StringRec "foo" 0,StringRec "get_int" 0,StringRec "*** RUNTIME ERROR ***: Array out of Bounds access in method \"%s\"\n" 0,StringRec "*** RUNTIME ERROR ***: Missing return statement in method \"%s\"\n" 0,ArrayRec (DecafArr {arrayType = DecafInteger, arrayID = "a", arrayLength = DecafDec "10", arrayPos = (2,7)}) 32,MethodRec (DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (4,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (5,13)) (5,13))) (5,5)], blockPos = (4,22)}, methodPos = (4,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafVoid, methodID = "foo", methodArg = [], methodBody = DecafBlock {blockVars = [DecafVar {varType = DecafInteger, varID = "i", varPos = (9,5)}], blockStms = [DecafAssignStm (DecafVarLoc "i" (10,7)) (DecafEq (10,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (10,18)) (10,18)], methodCallPos = (10,9)}) (10,19)) (10,5),DecafAssignStm (DecafArrLoc {arrLocIdent = "a", arrLocExpr = DecafLocExpr (DecafVarLoc "i" (13,8)) (13,8), arrLocPos = (13,5)}) (DecafEq (13,12)) (DecafLitExpr (DecafIntLit (DecafDec "7") (13,13)) (13,13)) (13,5),DecafAssignStm (DecafArrLoc {arrLocIdent = "a", arrLocExpr = DecafLocExpr (DecafVarLoc "i" (14,8)) (14,8), arrLocPos = (14,5)}) (DecafEq (14,12)) (DecafLitExpr (DecafIntLit (DecafDec "3") (14,13)) (14,13)) (14,5)], blockPos = (8,14)}, methodPos = (8,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [], blockStms = [DecafMethodStm (DecafPureMethodCall {methodCallID = "foo", methodCallArgs = [], methodCallPos = (18,5)}) (18,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (19,29),DecafCalloutArgExpr (DecafLocExpr (DecafArrLoc {arrLocIdent = "a", arrLocExpr = DecafLitExpr (DecafIntLit (DecafDec "2") (19,34)) (19,34), arrLocPos = (19,31)}) (19,35)) (19,35)], methodCalloutPos = (19,5)}) (19,5)], blockPos = (17,15)}, methodPos = (17,3)}) ("",32)], blockType = GlobalBlock}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "x", varPos = (4,15)}) 32,VarRec (DecafVar {varType = DecafVoid, varID = "return", varPos = (0,0)}) 32], blockType = MethodBlock DecafInteger}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "i", varPos = (9,5)}) 32], blockType = MethodBlock DecafVoid}
    SymbolTable {symbolRecords = [], blockType = MethodBlock DecafVoid}
,ROOT)
USE64
extern get_int_035
extern printf
    section .data:
    __string0: db 0x25, 0x64, 0xa, 0x0
    __string1: db 0x6d, 0x61, 0x69, 0x6e, 0x0
    __string2: db 0x66, 0x6f, 0x6f, 0x0
    __string3: db 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x0
    __string4: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0
    __string5: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0
    common __array0 80:8

    section .text:
    global main


    __exception104:
        mov r11, __string4
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov rsp, rbp
        pop rbp
        ret


    main:
        push rbp
        mov rbp, rsp
        sub rsp, 0x20
        mov r11, 0x0
        mov rax, r11
        call __proc__foo1
        jmp RETURNADDRESS23


    __proc__get_int0:
        push rbp
        mov rbp, rsp
        sub rsp, 0x8
        mov r11, rdi
        mov qword [rbp+-0x8], r11
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov rsp, rbp
        pop rbp
        ret


    __proc__foo1:
        push rbp
        mov rbp, rsp
        sub rsp, 0x30
        mov r11, 0x0
        mov qword [rbp+-0x8], r11
        mov r11, 0x2
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS7


    RETURNADDRESS7:
        mov r11, rax
        mov qword [rbp+-0x10], r11
        mov r11, qword [rbp+-0x10]
        mov qword [rbp+-0x8], r11
        mov r10, qword [rbp+-0x8]
        mov r11, 0xa
        cmp r10, r11
        jl __boundscheck11
        jmp __boundscheck_fail9


    __boundscheck_fail9:
        mov r11, __string2
        mov rsi, r11
        jmp __exception104


    __boundscheck_fail10:
        mov r11, __string2
        mov rsi, r11
        jmp __exception104


    __boundscheck11:
        mov r10, qword [rbp+-0x8]
        mov r11, 0x0
        cmp r10, r11
        jge __boundscheck12
        jmp __boundscheck_fail10


    __boundscheck12:
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov r10, 0x8
        imul r10
        mov qword [rbp+-0x18], rax
        mov r10, qword [rbp+-0x18]
        mov r10, qword [__array0+r10]
        mov qword [rbp+-0x20], r10
        mov r11, 0x7
        mov qword [rbp+-0x20], r11
        mov r11, qword [rbp+-0x20]
        mov r10, qword [rbp+-0x18]
        mov qword [__array0+r10], r11
        mov r10, qword [rbp+-0x8]
        mov r11, 0xa
        cmp r10, r11
        jl __boundscheck18
        jmp __boundscheck_fail16


    __boundscheck_fail16:
        mov r11, __string2
        mov rsi, r11
        jmp __exception104


    __boundscheck_fail17:
        mov r11, __string2
        mov rsi, r11
        jmp __exception104


    __boundscheck18:
        mov r10, qword [rbp+-0x8]
        mov r11, 0x0
        cmp r10, r11
        jge __boundscheck19
        jmp __boundscheck_fail17


    __boundscheck19:
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov r10, 0x8
        imul r10
        mov qword [rbp+-0x28], rax
        mov r10, qword [rbp+-0x28]
        mov r10, qword [__array0+r10]
        mov qword [rbp+-0x30], r10
        mov r11, 0x3
        mov qword [rbp+-0x30], r11
        mov r11, qword [rbp+-0x30]
        mov r10, qword [rbp+-0x28]
        mov qword [__array0+r10], r11
        mov rsp, rbp
        pop rbp
        ret


    RETURNADDRESS23:
        mov r11, rax
        mov qword [rbp+-0x8], r11
        mov r11, __string0
        mov qword [rbp+-0x10], r11
        mov r10, 0x2
        mov r11, 0xa
        cmp r10, r11
        jl __boundscheck28
        jmp __boundscheck_fail26


    __boundscheck_fail26:
        mov r11, __string1
        mov rsi, r11
        jmp __exception104


    __boundscheck_fail27:
        mov r11, __string1
        mov rsi, r11
        jmp __exception104


    __boundscheck28:
        mov r10, 0x2
        mov r11, 0x0
        cmp r10, r11
        jge __boundscheck29
        jmp __boundscheck_fail27


    __boundscheck29:
        mov r10, qword [__array0+0x10]
        mov qword [rbp+-0x18], r10
        mov r11, qword [rbp+-0x10]
        mov rdi, r11
        mov r11, qword [rbp+-0x18]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x20], r11
        mov rsp, rbp
        pop rbp
        ret


0:

0:

LABEL: __exception-104:
    RDI <- __string4
    RAX <- 0x0
    CALL printf
    RET

LABEL: main:
    ENTER 4
    RAX <- 0x0
    CALL __proc__foo1 AND RETURN TO RETURNADDRESS23

LABEL: __proc__get_int0:
    ENTER 1
    s0 <- RDI
    RAX <- s0
    RET

LABEL: __proc__foo1:
    ENTER 6
    s0 <- 0x0
    RDI <- 0x2
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS7

LABEL: RETURNADDRESS7:
    s1 <- RAX
    s0 <- s1
    IF s0 < 0xa THEN __boundscheck11 ELSE __boundscheck_fail9

LABEL: __boundscheck_fail9:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck_fail10:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck11:
    IF s0 >= 0x0 THEN __boundscheck12 ELSE __boundscheck_fail10

LABEL: __boundscheck12:
    s2 <- s0 MUL 0x8
    LOAD s3, [__array0 + s2 + 0x0]
    s3 <- 0x7
    __array0(s2, 0x8) <- s3
    IF s0 < 0xa THEN __boundscheck18 ELSE __boundscheck_fail16

LABEL: __boundscheck_fail16:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck_fail17:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck18:
    IF s0 >= 0x0 THEN __boundscheck19 ELSE __boundscheck_fail17

LABEL: __boundscheck19:
    s4 <- s0 MUL 0x8
    LOAD s5, [__array0 + s4 + 0x0]
    s5 <- 0x3
    __array0(s4, 0x8) <- s5
    RET

LABEL: RETURNADDRESS23:
    s0 <- RAX
    s1 <- __string0
    IF 0x2 < 0xa THEN __boundscheck28 ELSE __boundscheck_fail26

LABEL: __boundscheck_fail26:
    RSI <- __string1
    JMP __exception-104

LABEL: __boundscheck_fail27:
    RSI <- __string1
    JMP __exception-104

LABEL: __boundscheck28:
    IF 0x2 >= 0x0 THEN __boundscheck29 ELSE __boundscheck_fail27

LABEL: __boundscheck29:
    LOAD s2, [__array0 +  + 0x10]
    RDI <- s1
    RSI <- s2
    RAX <- 0x0
    CALL printf
    s3 <- RAX
    RET


