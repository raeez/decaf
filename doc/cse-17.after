optimizations on
debug on
formattedTree: DecafProgram {fields = [DecafVarField (DecafVar {varType = DecafInteger, varID = "a", varPos = (2,7)}) (2,7),DecafVarField (DecafVar {varType = DecafInteger, varID = "b", varPos = (2,10)}) (2,10),DecafVarField (DecafVar {varType = DecafInteger, varID = "c", varPos = (2,13)}) (2,13),DecafVarField (DecafVar {varType = DecafInteger, varID = "d", varPos = (2,16)}) (2,16)], methods = [DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (4,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (5,13)) (5,13))) (5,5)], blockPos = (4,22)}, methodPos = (4,3)},DecafMethod {methodType = DecafVoid, methodID = "foo", methodArg = [], methodBody = DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "a" (9,7)) (DecafEq (9,9)) (DecafLitExpr (DecafIntLit (DecafDec "1") (9,10)) (9,10)) (9,5)], blockPos = (8,14)}, methodPos = (8,3)},DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "a" (13,7)) (DecafEq (13,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (13,18)) (13,18)], methodCallPos = (13,9)}) (13,19)) (13,5),DecafAssignStm (DecafVarLoc "b" (14,7)) (DecafEq (14,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "3") (14,18)) (14,18)], methodCallPos = (14,9)}) (14,19)) (14,5),DecafAssignStm (DecafVarLoc "c" (15,7)) (DecafEq (15,9)) (DecafLitExpr (DecafIntLit (DecafDec "0") (15,10)) (15,10)) (15,5),DecafAssignStm (DecafVarLoc "d" (15,14)) (DecafEq (15,16)) (DecafLitExpr (DecafIntLit (DecafDec "0") (15,17)) (15,17)) (15,12),DecafAssignStm (DecafVarLoc "c" (17,7)) (DecafEq (17,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (17,11)) (17,11)) (DecafBinArithOp (DecafPlusOp (17,13)) (17,13)) (DecafLocExpr (DecafVarLoc "b" (17,14)) (17,14)) (17,14)) (17,5),DecafMethodStm (DecafPureMethodCall {methodCallID = "foo", methodCallArgs = [], methodCallPos = (18,5)}) (18,5),DecafAssignStm (DecafVarLoc "d" (19,7)) (DecafEq (19,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (19,11)) (19,11)) (DecafBinArithOp (DecafPlusOp (19,13)) (19,13)) (DecafLocExpr (DecafVarLoc "b" (19,14)) (19,14)) (19,14)) (19,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (21,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "c" (21,32)) (21,32)) (21,32)], methodCalloutPos = (21,5)}) (21,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (22,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "d" (22,32)) (22,32)) (22,32)], methodCalloutPos = (22,5)}) (22,5)], blockPos = (12,15)}, methodPos = (12,3)}]}

(SymbolTable {symbolRecords = [StringRec "%d\n" 0,StringRec "%d\n" 0,StringRec "main" 0,StringRec "foo" 0,StringRec "get_int" 0,StringRec "*** RUNTIME ERROR ***: Array out of Bounds access in method \"%s\"\n" 0,StringRec "*** RUNTIME ERROR ***: Missing return statement in method \"%s\"\n" 0,VarRec (DecafVar {varType = DecafInteger, varID = "a", varPos = (2,7)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "b", varPos = (2,10)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "c", varPos = (2,13)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "d", varPos = (2,16)}) 32,MethodRec (DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (4,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (5,13)) (5,13))) (5,5)], blockPos = (4,22)}, methodPos = (4,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafVoid, methodID = "foo", methodArg = [], methodBody = DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "a" (9,7)) (DecafEq (9,9)) (DecafLitExpr (DecafIntLit (DecafDec "1") (9,10)) (9,10)) (9,5)], blockPos = (8,14)}, methodPos = (8,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "a" (13,7)) (DecafEq (13,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (13,18)) (13,18)], methodCallPos = (13,9)}) (13,19)) (13,5),DecafAssignStm (DecafVarLoc "b" (14,7)) (DecafEq (14,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "3") (14,18)) (14,18)], methodCallPos = (14,9)}) (14,19)) (14,5),DecafAssignStm (DecafVarLoc "c" (15,7)) (DecafEq (15,9)) (DecafLitExpr (DecafIntLit (DecafDec "0") (15,10)) (15,10)) (15,5),DecafAssignStm (DecafVarLoc "d" (15,14)) (DecafEq (15,16)) (DecafLitExpr (DecafIntLit (DecafDec "0") (15,17)) (15,17)) (15,12),DecafAssignStm (DecafVarLoc "c" (17,7)) (DecafEq (17,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (17,11)) (17,11)) (DecafBinArithOp (DecafPlusOp (17,13)) (17,13)) (DecafLocExpr (DecafVarLoc "b" (17,14)) (17,14)) (17,14)) (17,5),DecafMethodStm (DecafPureMethodCall {methodCallID = "foo", methodCallArgs = [], methodCallPos = (18,5)}) (18,5),DecafAssignStm (DecafVarLoc "d" (19,7)) (DecafEq (19,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (19,11)) (19,11)) (DecafBinArithOp (DecafPlusOp (19,13)) (19,13)) (DecafLocExpr (DecafVarLoc "b" (19,14)) (19,14)) (19,14)) (19,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (21,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "c" (21,32)) (21,32)) (21,32)], methodCalloutPos = (21,5)}) (21,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (22,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "d" (22,32)) (22,32)) (22,32)], methodCalloutPos = (22,5)}) (22,5)], blockPos = (12,15)}, methodPos = (12,3)}) ("",32)], blockType = GlobalBlock}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "x", varPos = (4,15)}) 32,VarRec (DecafVar {varType = DecafVoid, varID = "return", varPos = (0,0)}) 32], blockType = MethodBlock DecafInteger}
    SymbolTable {symbolRecords = [], blockType = MethodBlock DecafVoid}
    SymbolTable {symbolRecords = [], blockType = MethodBlock DecafVoid}
,ROOT)
USE64
extern get_int_035
extern printf
    section .data:
    __string0: db 0x25, 0x64, 0xa, 0x0
    __string1: db 0x25, 0x64, 0xa, 0x0
    __string2: db 0x6d, 0x61, 0x69, 0x6e, 0x0
    __string3: db 0x66, 0x6f, 0x6f, 0x0
    __string4: db 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x0
    __string5: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0
    __string6: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0
    common g0 8:8
    common g1 8:8
    common g2 8:8
    common g3 8:8

    section .text:
    global main


    main:
        push rbp
        mov rbp, rsp
        sub rsp, 0x48
        mov r11, 0x2
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS6


    __proc__get_int0:
        push rbp
        mov rbp, rsp
        sub rsp, 0x8
        mov r11, rdi
        mov qword [rbp+-0x8], r11
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov rsp, rbp
        pop rbp
        ret


    __proc__foo1:
        push rbp
        mov rbp, rsp
        sub rsp, 0x0
        mov r11, 0x1
        mov qword [g0], r11
        mov rsp, rbp
        pop rbp
        ret


    RETURNADDRESS6:
        mov r11, rax
        mov qword [rbp+-0x8], r11
        mov r11, qword [rbp+-0x8]
        mov qword [g0], r11
        mov r11, 0x3
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS8


    RETURNADDRESS8:
        mov r11, rax
        mov qword [rbp+-0x10], r11
        mov r11, qword [rbp+-0x10]
        mov qword [g1], r11
        mov r11, 0x0
        mov qword [g2], r11
        mov r11, 0x0
        mov qword [g3], r11
        mov r11, qword [g0]
        mov r10, r11
        mov r11, qword [g1]
        add r10, r11
        mov qword [rbp+-0x18], r10
        mov r11, qword [rbp+-0x18]
        mov qword [g2], r11
        mov r11, 0x0
        mov rax, r11
        call __proc__foo1
        jmp RETURNADDRESS12


    RETURNADDRESS12:
        mov r11, rax
        mov qword [rbp+-0x20], r11
        mov r11, qword [g0]
        mov r10, r11
        mov r11, qword [g1]
        add r10, r11
        mov qword [rbp+-0x28], r10
        mov r11, qword [rbp+-0x28]
        mov qword [g3], r11
        mov r11, __string0
        mov qword [rbp+-0x30], r11
        mov r11, qword [rbp+-0x30]
        mov rdi, r11
        mov r11, qword [g2]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x38], r11
        mov r11, __string0
        mov qword [rbp+-0x40], r11
        mov r11, qword [rbp+-0x40]
        mov rdi, r11
        mov r11, qword [g3]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x48], r11
        mov rsp, rbp
        pop rbp
        ret


0:

0:

LABEL: main:
    ENTER 9
    RDI <- 0x2
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS6

LABEL: __proc__get_int0:
    ENTER 1
    s0 <- RDI
    RAX <- s0
    RET

LABEL: __proc__foo1:
    ENTER 0
    g0 <- 0x1
    RET

LABEL: RETURNADDRESS6:
    s0 <- RAX
    g0 <- s0
    RDI <- 0x3
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS8

LABEL: RETURNADDRESS8:
    s1 <- RAX
    g1 <- s1
    g2 <- 0x0
    g3 <- 0x0
    s2 <- g0 ADD g1
    g2 <- s2
    RAX <- 0x0
    CALL __proc__foo1 AND RETURN TO RETURNADDRESS12

LABEL: RETURNADDRESS12:
    s3 <- RAX
    s4 <- g0 ADD g1
    g3 <- s4
    s5 <- __string0
    RDI <- s5
    RSI <- g2
    RAX <- 0x0
    CALL printf
    s6 <- RAX
    s7 <- __string0
    RDI <- s7
    RSI <- g3
    RAX <- 0x0
    CALL printf
    s8 <- RAX
    RET


