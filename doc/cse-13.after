optimizations on
debug on
formattedTree: DecafProgram {fields = [], methods = [DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (2,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (3,13)) (3,13))) (3,5)], blockPos = (2,22)}, methodPos = (2,3)},DecafMethod {methodType = DecafBoolean, methodID = "get_bool", methodArg = [DecafVar {varType = DecafBoolean, varID = "x", varPos = (6,20)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (7,13)) (7,13))) (7,5)], blockPos = (6,31)}, methodPos = (6,3)},DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [DecafVar {varType = DecafInteger, varID = "a", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "b", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "c", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "d", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "e", varPos = (11,5)},DecafVar {varType = DecafBoolean, varID = "x", varPos = (12,5)}], blockStms = [DecafAssignStm (DecafVarLoc "a" (14,7)) (DecafEq (14,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (14,18)) (14,18)], methodCallPos = (14,9)}) (14,19)) (14,5),DecafAssignStm (DecafVarLoc "b" (15,7)) (DecafEq (15,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "3") (15,18)) (15,18)], methodCallPos = (15,9)}) (15,19)) (15,5),DecafAssignStm (DecafVarLoc "x" (16,7)) (DecafEq (16,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_bool", methodCallArgs = [DecafLitExpr (DecafBoolLit True (16,22)) (16,22)], methodCallPos = (16,9)}) (16,23)) (16,5),DecafAssignStm (DecafVarLoc "c" (17,7)) (DecafEq (17,9)) (DecafLitExpr (DecafIntLit (DecafDec "0") (17,10)) (17,10)) (17,5),DecafAssignStm (DecafVarLoc "d" (17,14)) (DecafEq (17,16)) (DecafLitExpr (DecafIntLit (DecafDec "0") (17,17)) (17,17)) (17,12),DecafAssignStm (DecafVarLoc "e" (17,21)) (DecafEq (17,23)) (DecafLitExpr (DecafIntLit (DecafDec "0") (17,24)) (17,24)) (17,19),DecafIfStm (DecafLocExpr (DecafVarLoc "x" (19,10)) (19,10)) (DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "c" (20,9)) (DecafEq (20,11)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (20,13)) (20,13)) (DecafBinArithOp (DecafPlusOp (20,15)) (20,15)) (DecafLocExpr (DecafVarLoc "b" (20,16)) (20,16)) (20,16)) (20,7)], blockPos = (19,12)}) (Just (DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "d" (22,9)) (DecafEq (22,11)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (22,13)) (22,13)) (DecafBinArithOp (DecafMulOp (22,15)) (22,15)) (DecafLocExpr (DecafVarLoc "b" (22,16)) (22,16)) (22,16)) (22,7)], blockPos = (21,12)})) (19,5),DecafAssignStm (DecafVarLoc "e" (24,7)) (DecafEq (24,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (24,11)) (24,11)) (DecafBinArithOp (DecafPlusOp (24,13)) (24,13)) (DecafLocExpr (DecafVarLoc "b" (24,14)) (24,14)) (24,14)) (24,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (26,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "c" (26,32)) (26,32)) (26,32)], methodCalloutPos = (26,5)}) (26,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (27,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "d" (27,32)) (27,32)) (27,32)], methodCalloutPos = (27,5)}) (27,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (28,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "e" (28,32)) (28,32)) (28,32)], methodCalloutPos = (28,5)}) (28,5)], blockPos = (10,15)}, methodPos = (10,3)}]}

(SymbolTable {symbolRecords = [StringRec "%d\n" 0,StringRec "%d\n" 0,StringRec "%d\n" 0,StringRec "main" 0,StringRec "get_bool" 0,StringRec "get_int" 0,StringRec "*** RUNTIME ERROR ***: Array out of Bounds access in method \"%s\"\n" 0,StringRec "*** RUNTIME ERROR ***: Missing return statement in method \"%s\"\n" 0,MethodRec (DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (2,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (3,13)) (3,13))) (3,5)], blockPos = (2,22)}, methodPos = (2,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafBoolean, methodID = "get_bool", methodArg = [DecafVar {varType = DecafBoolean, varID = "x", varPos = (6,20)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (7,13)) (7,13))) (7,5)], blockPos = (6,31)}, methodPos = (6,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [DecafVar {varType = DecafInteger, varID = "a", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "b", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "c", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "d", varPos = (11,5)},DecafVar {varType = DecafInteger, varID = "e", varPos = (11,5)},DecafVar {varType = DecafBoolean, varID = "x", varPos = (12,5)}], blockStms = [DecafAssignStm (DecafVarLoc "a" (14,7)) (DecafEq (14,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (14,18)) (14,18)], methodCallPos = (14,9)}) (14,19)) (14,5),DecafAssignStm (DecafVarLoc "b" (15,7)) (DecafEq (15,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "3") (15,18)) (15,18)], methodCallPos = (15,9)}) (15,19)) (15,5),DecafAssignStm (DecafVarLoc "x" (16,7)) (DecafEq (16,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_bool", methodCallArgs = [DecafLitExpr (DecafBoolLit True (16,22)) (16,22)], methodCallPos = (16,9)}) (16,23)) (16,5),DecafAssignStm (DecafVarLoc "c" (17,7)) (DecafEq (17,9)) (DecafLitExpr (DecafIntLit (DecafDec "0") (17,10)) (17,10)) (17,5),DecafAssignStm (DecafVarLoc "d" (17,14)) (DecafEq (17,16)) (DecafLitExpr (DecafIntLit (DecafDec "0") (17,17)) (17,17)) (17,12),DecafAssignStm (DecafVarLoc "e" (17,21)) (DecafEq (17,23)) (DecafLitExpr (DecafIntLit (DecafDec "0") (17,24)) (17,24)) (17,19),DecafIfStm (DecafLocExpr (DecafVarLoc "x" (19,10)) (19,10)) (DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "c" (20,9)) (DecafEq (20,11)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (20,13)) (20,13)) (DecafBinArithOp (DecafPlusOp (20,15)) (20,15)) (DecafLocExpr (DecafVarLoc "b" (20,16)) (20,16)) (20,16)) (20,7)], blockPos = (19,12)}) (Just (DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "d" (22,9)) (DecafEq (22,11)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (22,13)) (22,13)) (DecafBinArithOp (DecafMulOp (22,15)) (22,15)) (DecafLocExpr (DecafVarLoc "b" (22,16)) (22,16)) (22,16)) (22,7)], blockPos = (21,12)})) (19,5),DecafAssignStm (DecafVarLoc "e" (24,7)) (DecafEq (24,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (24,11)) (24,11)) (DecafBinArithOp (DecafPlusOp (24,13)) (24,13)) (DecafLocExpr (DecafVarLoc "b" (24,14)) (24,14)) (24,14)) (24,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (26,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "c" (26,32)) (26,32)) (26,32)], methodCalloutPos = (26,5)}) (26,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (27,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "d" (27,32)) (27,32)) (27,32)], methodCalloutPos = (27,5)}) (27,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (28,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "e" (28,32)) (28,32)) (28,32)], methodCalloutPos = (28,5)}) (28,5)], blockPos = (10,15)}, methodPos = (10,3)}) ("",32)], blockType = GlobalBlock}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "x", varPos = (2,15)}) 32,VarRec (DecafVar {varType = DecafVoid, varID = "return", varPos = (0,0)}) 32], blockType = MethodBlock DecafInteger}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafBoolean, varID = "x", varPos = (6,20)}) 32,VarRec (DecafVar {varType = DecafVoid, varID = "return", varPos = (0,0)}) 32], blockType = MethodBlock DecafBoolean}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "a", varPos = (11,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "b", varPos = (11,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "c", varPos = (11,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "d", varPos = (11,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "e", varPos = (11,5)}) 32,VarRec (DecafVar {varType = DecafBoolean, varID = "x", varPos = (12,5)}) 32], blockType = MethodBlock DecafVoid}
        SymbolTable {symbolRecords = [], blockType = IfBlock}
        SymbolTable {symbolRecords = [], blockType = IfBlock}
,ROOT)
USE64
extern get_int_035
extern printf
    section .data:
    __string0: db 0x25, 0x64, 0xa, 0x0
    __string1: db 0x25, 0x64, 0xa, 0x0
    __string2: db 0x25, 0x64, 0xa, 0x0
    __string3: db 0x6d, 0x61, 0x69, 0x6e, 0x0
    __string4: db 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x0
    __string5: db 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x0
    __string6: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0
    __string7: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0

    section .text:
    global main


    main:
        push rbp
        mov rbp, rsp
        sub rsp, 0x90
        mov r11, 0x0
        mov qword [rbp+-0x8], r11
        mov r11, 0x0
        mov qword [rbp+-0x10], r11
        mov r11, 0x0
        mov qword [rbp+-0x18], r11
        mov r11, 0x0
        mov qword [rbp+-0x20], r11
        mov r11, 0x0
        mov qword [rbp+-0x28], r11
        mov r11, 0x0
        mov qword [rbp+-0x30], r11
        mov r11, 0x2
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS14


    __proc__get_int0:
        push rbp
        mov rbp, rsp
        sub rsp, 0x8
        mov r11, rdi
        mov qword [rbp+-0x8], r11
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov rsp, rbp
        pop rbp
        ret


    __proc__get_bool1:
        push rbp
        mov rbp, rsp
        sub rsp, 0x8
        mov r11, rdi
        mov qword [rbp+-0x8], r11
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov rsp, rbp
        pop rbp
        ret


    RETURNADDRESS14:
        mov r11, rax
        mov qword [rbp+-0x38], r11
        mov r11, qword [rbp+-0x38]
        mov qword [rbp+-0x8], r11
        mov r11, 0x3
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS16


    RETURNADDRESS16:
        mov r11, rax
        mov qword [rbp+-0x40], r11
        mov r11, qword [rbp+-0x40]
        mov qword [rbp+-0x10], r11
        mov r11, -0x1
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_bool1
        jmp RETURNADDRESS18


    RETURNADDRESS18:
        mov r11, rax
        mov qword [rbp+-0x48], r11
        mov r11, qword [rbp+-0x48]
        mov qword [rbp+-0x30], r11
        mov r11, 0x0
        mov qword [rbp+-0x18], r11
        mov r11, 0x0
        mov qword [rbp+-0x20], r11
        mov r11, 0x0
        mov qword [rbp+-0x28], r11
        mov r10, qword [rbp+-0x30]
        mov r11, 0x0
        cmp r10, r11
        jl LTRUE24
        jmp LFalse23


    LFalse23:
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov r10, qword [rbp+-0x10]
        imul r10
        mov qword [rbp+-0x50], rax
        mov r11, qword [rbp+-0x50]
        mov qword [rbp+-0x20], r11
        jmp LEND25


    LTRUE24:
        mov r11, qword [rbp+-0x8]
        mov r10, r11
        mov r11, qword [rbp+-0x10]
        add r10, r11
        mov qword [rbp+-0x58], r10
        mov r11, qword [rbp+-0x58]
        mov qword [rbp+-0x18], r11
        jmp LEND25


    LEND25:
        mov r11, qword [rbp+-0x8]
        mov r10, r11
        mov r11, qword [rbp+-0x10]
        add r10, r11
        mov qword [rbp+-0x60], r10
        mov r11, qword [rbp+-0x60]
        mov qword [rbp+-0x28], r11
        mov r11, __string0
        mov qword [rbp+-0x68], r11
        mov r11, qword [rbp+-0x68]
        mov rdi, r11
        mov r11, qword [rbp+-0x18]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x70], r11
        mov r11, __string0
        mov qword [rbp+-0x78], r11
        mov r11, qword [rbp+-0x78]
        mov rdi, r11
        mov r11, qword [rbp+-0x20]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x80], r11
        mov r11, __string0
        mov qword [rbp+-0x88], r11
        mov r11, qword [rbp+-0x88]
        mov rdi, r11
        mov r11, qword [rbp+-0x28]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x90], r11
        mov rsp, rbp
        pop rbp
        ret


0:

0:

LABEL: main:
    ENTER 18
    s0 <- 0x0
    s1 <- 0x0
    s2 <- 0x0
    s3 <- 0x0
    s4 <- 0x0
    s5 <- 0x0
    RDI <- 0x2
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS14

LABEL: __proc__get_int0:
    ENTER 1
    s0 <- RDI
    RAX <- s0
    RET

LABEL: __proc__get_bool1:
    ENTER 1
    s0 <- RDI
    RAX <- s0
    RET

LABEL: RETURNADDRESS14:
    s6 <- RAX
    s0 <- s6
    RDI <- 0x3
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS16

LABEL: RETURNADDRESS16:
    s7 <- RAX
    s1 <- s7
    RDI <- -0x1
    RAX <- 0x0
    CALL __proc__get_bool1 AND RETURN TO RETURNADDRESS18

LABEL: RETURNADDRESS18:
    s8 <- RAX
    s5 <- s8
    s2 <- 0x0
    s3 <- 0x0
    s4 <- 0x0
    IF s5 THEN LTRUE24 ELSE LFalse23

LABEL: LFalse23:
    s9 <- s0 MUL s1
    s3 <- s9
    JMP LEND25

LABEL: LTRUE24:
    s10 <- s0 ADD s1
    s2 <- s10
    JMP LEND25

LABEL: LEND25:
    s11 <- s0 ADD s1
    s4 <- s11
    s12 <- __string0
    RDI <- s12
    RSI <- s2
    RAX <- 0x0
    CALL printf
    s13 <- RAX
    s14 <- __string0
    RDI <- s14
    RSI <- s3
    RAX <- 0x0
    CALL printf
    s15 <- RAX
    s16 <- __string0
    RDI <- s16
    RSI <- s4
    RAX <- 0x0
    CALL printf
    s17 <- RAX
    RET


