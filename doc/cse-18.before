0:

0:

LABEL: __proc__get_int0:
    s0 <- RDI
    RAX <- s0
    RET
    RSI <- __string3
    JMP __exception-105


0:

LABEL: __proc__foo1:
    s2 <- 0x0
    RDI <- 0x2
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS7

LABEL: RETURNADDRESS7:
    s6 <- RAX
    s2 <- s6
    IF s2 < 0xa THEN __boundscheck11 ELSE __boundscheck_fail9

LABEL: __boundscheck_fail9:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck11:
    IF s2 >= 0x0 THEN __boundscheck12 ELSE __boundscheck_fail10

LABEL: __boundscheck_fail10:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck12:
    s13 <- s2 MUL 0x8
    LOAD s8, [__array0 + s13 + 0x0]
    s8 <- 0x7
    __array0(s13, 0x8) <- s8
    IF s2 < 0xa THEN __boundscheck18 ELSE __boundscheck_fail16

LABEL: __boundscheck_fail16:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck18:
    IF s2 >= 0x0 THEN __boundscheck19 ELSE __boundscheck_fail17

LABEL: __boundscheck_fail17:
    RSI <- __string2
    JMP __exception-104

LABEL: __boundscheck19:
    s20 <- s2 MUL 0x8
    LOAD s15, [__array0 + s20 + 0x0]
    s15 <- 0x3
    __array0(s20, 0x8) <- s15
    RET


0:

LABEL: main:
    RAX <- 0x0
    CALL __proc__foo1 AND RETURN TO RETURNADDRESS23

LABEL: RETURNADDRESS23:
    s22 <- RAX
    s24 <- __string0
    IF 0x2 < 0xa THEN __boundscheck28 ELSE __boundscheck_fail26

LABEL: __boundscheck_fail26:
    RSI <- __string1
    JMP __exception-104

LABEL: __boundscheck28:
    IF 0x2 >= 0x0 THEN __boundscheck29 ELSE __boundscheck_fail27

LABEL: __boundscheck_fail27:
    RSI <- __string1
    JMP __exception-104

LABEL: __boundscheck29:
    LOAD s25, [__array0 +  + 0x10]
    RDI <- s24
    RSI <- s25
    RAX <- 0x0
    CALL printf
    s30 <- RAX
    RET


0:

LABEL: __exception-104:
    RDI <- __string4
    RAX <- 0x0
    CALL printf
    RET


0:

LABEL: __exception-105:
    RDI <- __string5
    RAX <- 0x0
    CALL printf
    RET


REWRITING NODE [LABEL: main] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIREnterNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RAX <- 0x0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRCallNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __proc__foo1] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIREnterNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s0 <- 0x0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RDI <- 0x2] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RAX <- 0x0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRCallNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __proc__get_int0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIREnterNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s0 <- RDI] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RAX <- s0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRRetNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: RETURNADDRESS7] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s1 <- RAX] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s0 <- s1] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRIfNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck_fail9] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RSI <- __string2] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRJumpLabelNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __exception-104] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RDI <- __string4] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RAX <- 0x0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRCalloutNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRRetNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck11] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRIfNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck_fail10] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RSI <- __string2] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRJumpLabelNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck12] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s2 <- s0 MUL 0x8] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRLoadNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [s3 <- 0x7] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRRegOffAssignNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRIfNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LABEL: __boundscheck_fail16] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [RSI <- __string2] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRJumpLabelNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LABEL: __boundscheck18] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRIfNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LABEL: __boundscheck_fail17] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [RSI <- __string2] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRJumpLabelNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LABEL: __boundscheck19] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [s4 <- s0 MUL 0x8] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
lookup found! rewrote to s4 <- s2
REWRITING NODE [LIRLoadNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [s5 <- 0x3] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRRegOffAssignNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LIRRetNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
(CSEKey (LIRRegOperand (SREG 0)) LMUL (LIRIntOperand 8),CSEReg (SREG 2))
}
REWRITING NODE [LABEL: RETURNADDRESS23] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s0 <- RAX] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s1 <- __string0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRIfNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck_fail26] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RSI <- __string1] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRJumpLabelNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck28] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRIfNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck_fail27] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RSI <- __string1] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRJumpLabelNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LABEL: __boundscheck29] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRLoadNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RDI <- s1] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RSI <- s2] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [RAX <- 0x0] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRCalloutNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [s3 <- RAX] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
REWRITING NODE [LIRRetNode] ~~~~~~~~~WITH FACTS~~~~~~~~~~~~ {
}
