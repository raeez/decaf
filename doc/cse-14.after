optimizations on
debug on
formattedTree: DecafProgram {fields = [], methods = [DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (2,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (3,13)) (3,13))) (3,5)], blockPos = (2,22)}, methodPos = (2,3)},DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [DecafVar {varType = DecafInteger, varID = "a", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "b", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "c", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "d", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "x", varPos = (8,5)},DecafVar {varType = DecafInteger, varID = "i", varPos = (9,5)}], blockStms = [DecafAssignStm (DecafVarLoc "a" (11,7)) (DecafEq (11,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (11,18)) (11,18)], methodCallPos = (11,9)}) (11,19)) (11,5),DecafAssignStm (DecafVarLoc "b" (12,7)) (DecafEq (12,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "3") (12,18)) (12,18)], methodCallPos = (12,9)}) (12,19)) (12,5),DecafAssignStm (DecafVarLoc "x" (13,7)) (DecafEq (13,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "4") (13,18)) (13,18)], methodCallPos = (13,9)}) (13,19)) (13,5),DecafAssignStm (DecafVarLoc "c" (14,7)) (DecafEq (14,9)) (DecafLitExpr (DecafIntLit (DecafDec "0") (14,10)) (14,10)) (14,5),DecafAssignStm (DecafVarLoc "d" (14,14)) (DecafEq (14,16)) (DecafLitExpr (DecafIntLit (DecafDec "0") (14,17)) (14,17)) (14,12),DecafAssignStm (DecafVarLoc "c" (16,7)) (DecafEq (16,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (16,11)) (16,11)) (DecafBinArithOp (DecafPlusOp (16,13)) (16,13)) (DecafLocExpr (DecafVarLoc "b" (16,14)) (16,14)) (16,14)) (16,5),DecafForStm "i" (DecafLitExpr (DecafIntLit (DecafDec "5") (17,14)) (17,14)) (DecafLocExpr (DecafVarLoc "x" (17,18)) (17,18)) (DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "d" (18,9)) (DecafEq (18,11)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (18,13)) (18,13)) (DecafBinArithOp (DecafPlusOp (18,15)) (18,15)) (DecafLocExpr (DecafVarLoc "b" (18,16)) (18,16)) (18,16)) (18,7)], blockPos = (17,18)}) (17,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (21,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "c" (21,32)) (21,32)) (21,32)], methodCalloutPos = (21,5)}) (21,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (22,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "d" (22,32)) (22,32)) (22,32)], methodCalloutPos = (22,5)}) (22,5)], blockPos = (6,15)}, methodPos = (6,3)}]}

(SymbolTable {symbolRecords = [StringRec "%d\n" 0,StringRec "%d\n" 0,StringRec "main" 0,StringRec "get_int" 0,StringRec "*** RUNTIME ERROR ***: Array out of Bounds access in method \"%s\"\n" 0,StringRec "*** RUNTIME ERROR ***: Missing return statement in method \"%s\"\n" 0,MethodRec (DecafMethod {methodType = DecafInteger, methodID = "get_int", methodArg = [DecafVar {varType = DecafInteger, varID = "x", varPos = (2,15)}], methodBody = DecafBlock {blockVars = [], blockStms = [DecafRetStm (Just (DecafLocExpr (DecafVarLoc "x" (3,13)) (3,13))) (3,5)], blockPos = (2,22)}, methodPos = (2,3)}) ("",32),MethodRec (DecafMethod {methodType = DecafVoid, methodID = "main", methodArg = [], methodBody = DecafBlock {blockVars = [DecafVar {varType = DecafInteger, varID = "a", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "b", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "c", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "d", varPos = (7,5)},DecafVar {varType = DecafInteger, varID = "x", varPos = (8,5)},DecafVar {varType = DecafInteger, varID = "i", varPos = (9,5)}], blockStms = [DecafAssignStm (DecafVarLoc "a" (11,7)) (DecafEq (11,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "2") (11,18)) (11,18)], methodCallPos = (11,9)}) (11,19)) (11,5),DecafAssignStm (DecafVarLoc "b" (12,7)) (DecafEq (12,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "3") (12,18)) (12,18)], methodCallPos = (12,9)}) (12,19)) (12,5),DecafAssignStm (DecafVarLoc "x" (13,7)) (DecafEq (13,9)) (DecafMethodExpr (DecafPureMethodCall {methodCallID = "get_int", methodCallArgs = [DecafLitExpr (DecafIntLit (DecafDec "4") (13,18)) (13,18)], methodCallPos = (13,9)}) (13,19)) (13,5),DecafAssignStm (DecafVarLoc "c" (14,7)) (DecafEq (14,9)) (DecafLitExpr (DecafIntLit (DecafDec "0") (14,10)) (14,10)) (14,5),DecafAssignStm (DecafVarLoc "d" (14,14)) (DecafEq (14,16)) (DecafLitExpr (DecafIntLit (DecafDec "0") (14,17)) (14,17)) (14,12),DecafAssignStm (DecafVarLoc "c" (16,7)) (DecafEq (16,9)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (16,11)) (16,11)) (DecafBinArithOp (DecafPlusOp (16,13)) (16,13)) (DecafLocExpr (DecafVarLoc "b" (16,14)) (16,14)) (16,14)) (16,5),DecafForStm "i" (DecafLitExpr (DecafIntLit (DecafDec "5") (17,14)) (17,14)) (DecafLocExpr (DecafVarLoc "x" (17,18)) (17,18)) (DecafBlock {blockVars = [], blockStms = [DecafAssignStm (DecafVarLoc "d" (18,9)) (DecafEq (18,11)) (DecafBinExpr (DecafLocExpr (DecafVarLoc "a" (18,13)) (18,13)) (DecafBinArithOp (DecafPlusOp (18,15)) (18,15)) (DecafLocExpr (DecafVarLoc "b" (18,16)) (18,16)) (18,16)) (18,7)], blockPos = (17,18)}) (17,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (21,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "c" (21,32)) (21,32)) (21,32)], methodCalloutPos = (21,5)}) (21,5),DecafMethodStm (DecafMethodCallout {methodCalloutID = "printf", methodCalloutArgs = [DecafCalloutArgStr "%d\n" (22,29),DecafCalloutArgExpr (DecafLocExpr (DecafVarLoc "d" (22,32)) (22,32)) (22,32)], methodCalloutPos = (22,5)}) (22,5)], blockPos = (6,15)}, methodPos = (6,3)}) ("",32)], blockType = GlobalBlock}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "x", varPos = (2,15)}) 32,VarRec (DecafVar {varType = DecafVoid, varID = "return", varPos = (0,0)}) 32], blockType = MethodBlock DecafInteger}
    SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "a", varPos = (7,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "b", varPos = (7,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "c", varPos = (7,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "d", varPos = (7,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "x", varPos = (8,5)}) 32,VarRec (DecafVar {varType = DecafInteger, varID = "i", varPos = (9,5)}) 32], blockType = MethodBlock DecafVoid}
        SymbolTable {symbolRecords = [VarRec (DecafVar {varType = DecafInteger, varID = "i", varPos = (17,5)}) 32], blockType = ForBlock}
,ROOT)
USE64
extern get_int_035
extern printf
    section .data:
    __string0: db 0x25, 0x64, 0xa, 0x0
    __string1: db 0x25, 0x64, 0xa, 0x0
    __string2: db 0x6d, 0x61, 0x69, 0x6e, 0x0
    __string3: db 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x0
    __string4: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0
    __string5: db 0x2a, 0x2a, 0x2a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x22, 0x25, 0x73, 0x22, 0xa, 0x0

    section .text:
    global main


    main:
        push rbp
        mov rbp, rsp
        sub rsp, 0x80
        mov r11, 0x0
        mov qword [rbp+-0x8], r11
        mov r11, 0x0
        mov qword [rbp+-0x10], r11
        mov r11, 0x0
        mov qword [rbp+-0x18], r11
        mov r11, 0x0
        mov qword [rbp+-0x20], r11
        mov r11, 0x0
        mov qword [rbp+-0x28], r11
        mov r11, 0x0
        mov qword [rbp+-0x30], r11
        mov r11, 0x2
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS12


    __proc__get_int0:
        push rbp
        mov rbp, rsp
        sub rsp, 0x8
        mov r11, rdi
        mov qword [rbp+-0x8], r11
        mov r11, qword [rbp+-0x8]
        mov rax, r11
        mov rsp, rbp
        pop rbp
        ret


    RETURNADDRESS12:
        mov r11, rax
        mov qword [rbp+-0x38], r11
        mov r11, qword [rbp+-0x38]
        mov qword [rbp+-0x8], r11
        mov r11, 0x3
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS14


    RETURNADDRESS14:
        mov r11, rax
        mov qword [rbp+-0x40], r11
        mov r11, qword [rbp+-0x40]
        mov qword [rbp+-0x10], r11
        mov r11, 0x4
        mov rdi, r11
        mov r11, 0x0
        mov rax, r11
        call __proc__get_int0
        jmp RETURNADDRESS16


    RETURNADDRESS16:
        mov r11, rax
        mov qword [rbp+-0x48], r11
        mov r11, qword [rbp+-0x48]
        mov qword [rbp+-0x28], r11
        mov r11, 0x0
        mov qword [rbp+-0x18], r11
        mov r11, 0x0
        mov qword [rbp+-0x20], r11
        mov r11, qword [rbp+-0x8]
        mov r10, r11
        mov r11, qword [rbp+-0x10]
        add r10, r11
        mov qword [rbp+-0x50], r10
        mov r11, qword [rbp+-0x50]
        mov qword [rbp+-0x18], r11
        mov r11, 0x5
        mov qword [rbp+-0x58], r11
        jmp LLOOP21


    LFalse19:
        jmp LEND22


    LTRUE20:
        mov r11, qword [rbp+-0x50]
        mov qword [rbp+-0x60], r11
        mov r11, qword [rbp+-0x60]
        mov qword [rbp+-0x20], r11
        mov r11, qword [rbp+-0x58]
        mov r10, r11
        mov r11, 0x1
        add r10, r11
        mov qword [rbp+-0x58], r10
        jmp LLOOP21


    LLOOP21:
        mov r10, qword [rbp+-0x58]
        mov r11, qword [rbp+-0x28]
        cmp r10, r11
        jl LTRUE20
        jmp LFalse19


    LEND22:
        mov r11, __string0
        mov qword [rbp+-0x68], r11
        mov r11, qword [rbp+-0x68]
        mov rdi, r11
        mov r11, qword [rbp+-0x18]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x70], r11
        mov r11, __string0
        mov qword [rbp+-0x78], r11
        mov r11, qword [rbp+-0x78]
        mov rdi, r11
        mov r11, qword [rbp+-0x20]
        mov rsi, r11
        mov r11, 0x0
        mov rax, r11
        call printf
        mov r11, rax
        mov qword [rbp+-0x80], r11
        mov rsp, rbp
        pop rbp
        ret


0:

0:

LABEL: main:
    ENTER 16
    s0 <- 0x0
    s1 <- 0x0
    s2 <- 0x0
    s3 <- 0x0
    s4 <- 0x0
    s5 <- 0x0
    RDI <- 0x2
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS12

LABEL: __proc__get_int0:
    ENTER 1
    s0 <- RDI
    RAX <- s0
    RET

LABEL: RETURNADDRESS12:
    s6 <- RAX
    s0 <- s6
    RDI <- 0x3
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS14

LABEL: RETURNADDRESS14:
    s7 <- RAX
    s1 <- s7
    RDI <- 0x4
    RAX <- 0x0
    CALL __proc__get_int0 AND RETURN TO RETURNADDRESS16

LABEL: RETURNADDRESS16:
    s8 <- RAX
    s4 <- s8
    s2 <- 0x0
    s3 <- 0x0
    s9 <- s0 ADD s1
    s2 <- s9
    s10 <- 0x5
    JMP LLOOP21

LABEL: LFalse19:
    JMP LEND22

LABEL: LTRUE20:
    s11 <- s9
    s3 <- s11
    s10 <- s10 ADD 0x1
    JMP LLOOP21

LABEL: LLOOP21:
    IF s10 < s4 THEN LTRUE20 ELSE LFalse19

LABEL: LEND22:
    s12 <- __string0
    RDI <- s12
    RSI <- s2
    RAX <- 0x0
    CALL printf
    s13 <- RAX
    s14 <- __string0
    RDI <- s14
    RSI <- s3
    RAX <- 0x0
    CALL printf
    s15 <- RAX
    RET


